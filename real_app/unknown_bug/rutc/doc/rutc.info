This is rutc.info, produced by makeinfo version 4.13 from rutc.texi.

 

    This manual is for rutc (version 0.3.0, 2 May 2009)

        


File: rutc.info,  Node: Top,  Next: Overview,  Up: (dir)

rutc
****

This manual is for rutc (version 0.3.0, 2 May 2009)

    

* Menu:

* Overview:: An introduction to rutc
* Requirements:: How do I start rutc
* Statements::
* Data Types::
* Features::
* Thanks:: Thanks
   


File: rutc.info,  Node: Overview,  Next: Requirements,  Prev: Top,  Up: Top

1 Overview
**********

rutc is a calculator that can understand real and complex numbers in
bases 2, 8, 10 and 16, solve linear equations in any number of
variables and has a statistics mode. Many pre-defined constants and
functions are provided, and if these are not enough, you can define
your own. Execution control is provided by if-else statements, while
and for constructs. 


File: rutc.info,  Node: Requirements,  Next: Statements,  Prev: Overview,  Up: Top

2 Requirements
**************



2.1 Requirements
================

To build rutc, you require:
  1. GNU Scientific Library

  2. Make

  3. A C compiler. rutc has only been tested using GCC on GNU/Linux.

  4. Texinfo, to build the documentation
         If you plan to modify it, you will also need:
  1. Lex or an equivalent

  2. Yacc or an equivalent
        

2.2 Build
=========

./configure
make
 

2.3 Run
=======

After rutc is built, execute it by typing src/rutc. To quit, type quit
or exit. 


File: rutc.info,  Node: Statements,  Next: Data Types,  Prev: Requirements,  Up: Top

3 Statements
************

 rutc defines the following statements:
  1. Expression

  2. Assignment statement

  3. Solve statement

  4. Control statements
        

3.1 Expression
==============

A line consisting of an expression alone is considered a statement. The
effect is to print the value of the expression. 

3.2 Assignment statement
========================

This statement is of the form: variable [op]= expression where op
could be one of + - * / % ^. When this statement is executed, the RHS
is evaluated, and the value obtained is assigned to the variable. 

3.3 Solve Statement
===================

The solve statement has the form:
 solve integer
 E.g.: 
solve 3
 This particular example will solve a system of three linear
equations in three variables, x1, x2, x3. The equations are assumed
to have the form:
 a1x1 + b1x2 + c1x3 = d1
 a2x1 + b2x2 + c2x3 = d2
 a3x1 + b3x2 + c3x3 = d3
 Make sure the variables, a1, b1, etc. have the correct values before
the solve statement is executed. Note that the equations are solved
using Cramer's Rule, without any checks. 

3.4 Control Statements
======================

The following constructs are defined:
  1. If-else

  2. While

  3. For
        

3.4.1 If-else statement
-----------------------

An if-else has the form:

if(expression) { statement list } [ else { statement list } ]
 The else block is optional.
 E.g.:

if(a == 2) { b = 1
c = -4
} else { b = -1
}
 Note the position of the } (on a new line) and the else (on same
line). This translates to:
 evaluate the expression a == 2
 if it is true,
 assign the value -4 to c and 1 to b
 else
 assign -1 to b. 

3.4.2 While Statement
---------------------

The while construct is used to continue performing a series of
statements while a particular condition is true. Form:

while(expression) { statement list }
 E.g.:

while(a < 10) { sum = sum + a
a = a + 1
}
 Again, note the position of the }. 

3.4.3 For Statement
-------------------

The for statement has the form:
for(init statement; expression; statement) { statement list }
 It is equivalent to:
init statement
while(expression) { statement list
statement
}
 E.g.:

for(i = 0; i < 10; i += 1)
i
 Note that, currently, none of the three can be empty. 

3.4.4 Mode-dependent Statements
-------------------------------

The keyword stat is used to enter statistical mode, and the keyword
endstat, to exit it. In this mode, apart from the normal statements,
you can enter observations using the ob_set keyword:
ob_set = { 2, 4, 7, 3, 9, 2.34 }
 will produce the output:
mean = 4.55667
standard deviation = 6.64939
median = 3.5
 


File: rutc.info,  Node: Data Types,  Next: Features,  Prev: Statements,  Up: Top

4 Data Types
************



4.1 Values
==========

Values are represented as integers, double-precision floating-point
numbers or complex numbers. Integer range: -2147483647 to 2147483647
(the int range defined by the compiler) A value is used for the
result of evaluating an expression, or for storing a constant. 
rutc defines some stored values:
 pi: ratio of cirumference to diameter of a circle (approximated to a
double-precision floating-point number)
 e: exp(1)
 I: sqrt(-1)
 

4.2 Variables
=============

A variable is accessed using an identifier and an optional integer to
denote an index. An identifier may start with an underscore or an
alphabet, and may consist of more underscores or alphanumeric
characters. Variables need not be defined before being used: undefined
variables are automatically defined and given a value of 0. 

4.3 Arrays
==========

rutc supports arrays. A particular variable in an array can be accessed
using its subscript in square brackets: a[2]  An element in an
array need not be defined before being used. The subscript may be
denoted using any valid positive expression. E.g., a[exp(2)] is
equivalent to a[7].  Subscripts are converted to integers before
being used. Negative subscripts are not permitted. Note that the
variable var[0] is equivalent to var (bash style).  The elements of
the array need not all be of the same type. 

4.4 Operators
=============

+ - * / % ^ (i.e., power): normal arithmetic operators
 ++ --: pre- and post-fix operators
 ?: : conditional expression
 int div (i.e., integer division)
 == != < > <= >= : comparison operators
 && || !: boolean operators
 sqrt exp log ln (i.e., natural log)
 sin cos tan asin acos atan arg real imag conj: for complex numbers
 C P,: combination, permutation
 |.|: give the absolute value of an expression (applicable to complex
numbers, too)
 Note that the boolean operators are not short-circuit operators. 
An expression may also have the form:
( { statement list }, expression )}
 This is evaluated as: execute the statement list, and the expression
value becomes the value of the expression.
 E.g.:
( { i = 2
j = i++
}, j )
 prints out the value 2, and the value of i becomes 3. This permits
functions to become more expressive and easier to handle, e.g., the
following function checks whether a given number is a prime:
func prime(x) = ({ s = sqrt(x)
flag = 0
for(i = 2; i <= s; i+= 1)
{
if((x % i) == 0)
{
flag = 1
}
}
}, !flag)
 


File: rutc.info,  Node: Features,  Next: Thanks,  Prev: Data Types,  Up: Top

5 Features
**********

5.1 User-defined Functions
==========================

rutc allows you to define your own functions. Functions are defined
as:
func function_name(variable list) = expression
 The function name may be any valid identifier, while the variable
list is a comma-separated list of variables. Note: no arrays allowed
here (yet). This may then be used as any other function.
 E.g.:
func f(x, y) = x+y
f(2, 3)
 Gives an output of 5.  Note that a function is defined
immediately after you type it:
a = 2
func f(x) = 3*x
if(a == 2)
{
a = f(2)
} else
{
func f(x) = 3
}
 Sets the value of a to 3 not 6. 

5.2 Bases
=========

You can set the base of display by changing the value of the obase
variable. Supported values are 2, 8, 10 and 16. The default input
base is decimal. A number may be entered in any other supported base by
specifying a qualifier at the end: b for binary, o for octal and h
for hexadecimal. E.g.: Type 111b instead of 7. 

5.3 Comments
============

Comments may be enclosed within /* and */ (C style). Nested comments
are not permitted.
 E.g.:
/* This program will sum up the
/* first 10 natural numbers. */
for(i = 1; i <= 10; i += 1)
sum += i
sum
 


File: rutc.info,  Node: Thanks,  Prev: Features,  Up: Top

6 Thanks
********

Thanks are due to Mr. Ramprasad Joshi for his constant encouragement,
and advice. Also, thanks to my good friends Ajay, Deepak, Sanket and
Ravitejua for their (mostly) enthusiastic reviews and suggestions. 
 Well, that's all, folks! Hope you like it!  Frankly, rutc hasn't
generated much interest since it's release. If you do like it, or if
you have any suggestions, please drop me a note at
<lynusvaz@users.sourceforge.net>. I'd be glad of the feedback. 
rutc is distributed under the terms of the GPL v3. For more
information, type warranty in rutc, or see the file gpl.txt. 



Tag Table:
Node: Top149
Node: Overview437
Node: Requirements900
Node: Statements1509
Node: Data Types4293
Node: Features6882
Node: Thanks8189

End Tag Table
